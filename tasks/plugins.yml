---
- name: Ensure plugins folder exists.
  file:
    path: /usr/local/sonar/extensions/plugins
    state: directory

- set_fact:
    __sonar_api_base_url: "http://localhost:{{ sonar_configuration.sonar.web.port }}{{ sonar_configuration.sonar.web.context | default('') }}/api"

#
# The uri module doesn't work for any of these usecases when testning with
# ansible 2.8.1
#

- name: Get the list of installed plugins.
  command: "curl -s -u {{ sonar_token }}: {{ __sonar_api_base_url }}/plugins/installed"
  args:
    warn: false
  register: installed
  changed_when: false

- set_fact:
    installed: "{{ installed.stdout | from_json }}"

- name: Ensure unwanted plugins are removed
  command: "curl -s -u {{ sonar_token }}: -d key={{ plugin.key }} {{ __sonar_api_base_url }}/plugins/uninstall"
  args:
    warn: false
  loop: "{{ installed['plugins'] }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"
  when:
  - "plugin.name in sonar_plugins | json_query('[?state == `absent`].name')"
  notify: restart sonar

# Apparently doesn't include already installed plugins, which is neat.
- name: Get the list of available plugins.
  command: "curl -s -u {{ sonar_token }}: {{ __sonar_api_base_url }}/plugins/available"
  args:
    warn: false
  register: available
  changed_when: false

- set_fact:
    available: "{{ available.stdout | from_json }}"

# Beware the monster task
- name: Ensure plugins are installed
  command: "curl -s -u {{ sonar_token }}: -d key={{ plugin.key }} {{ __sonar_api_base_url }}/plugins/install"
  args:
    warn: false
  register: result
  changed_when: "'is already installed' not in result.stdout"
  notify: restart sonar
  loop: "{{ available['plugins'] }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"
  when:
  - "plugin.name in sonar_plugins | json_query('[?state != `absent`].name')"

- name: Get the list of plugins needing an update.
  command: "curl -s -u {{ sonar_token }}: {{ __sonar_api_base_url }}/plugins/updates"
  args:
    warn: false
  register: updates
  changed_when: false

- set_fact:
    updates: "{{ updates.stdout | from_json }}"

- include_tasks: plugin_update.yml
  loop: "{{ updates['plugins'] }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"

- name: Verify the status of community plugins
  stat:
    path: "/usr/local/sonar/extensions/plugins/{{ plugin.url | urlsplit('path') | basename }}"
  loop: "{{ sonar_community_plugins }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"
  register: communityplugins

- name: Remove unwanted community plugin
  file:
    path: "/usr/local/sonar/extensions/plugins/{{ plugin.url | urlsplit('path') | basename }}"
    state: absent
  when:
  - "plugin.state is defined"
  - "plugin.state == 'absent'"
  loop: "{{ sonar_community_plugins }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"
  notify: restart sonar

- name: Download community plugin
  get_url:
    url: "{{ item['plugin']['url'] }}" 
    dest: /usr/local/sonar/extensions/plugins/
  when:
  - "item['stat']['exists'] == false"
  - "(item['plugin']['state'] is not defined or (item['plugin']['state'] is defined and item['plugin']['state'] != 'absent'))"
  loop: "{{ communityplugins.results }}"
  loop_control:
    label: "{{ item['plugin']['name'] }}"
  notify: restart sonar
